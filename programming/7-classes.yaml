- id: 1
  collectionId: 7
  toolId: programming
  semanticVersion: {major: 0, minor: 0, patch: 1}
  title: Kreise
  author: bje40dc
  text: TODO!
  state: APPROVED

  content:
    functionName: circle
    foldername: circle
    filename: circle

    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >
        Schreiben Sie Unittests für eine Implementierung der Klasse <code>Circle</code>, die einen Kreis mit einem
        Mittelpunkt (bestehend aus X- und Y-Koordinate und einem Radius) darstellt. Es sollen ein Konstruktor
        (<code>def __init__(self, center_x: float, center_y: float, radius: float)</code>) und eine Funktion
        <code>def area(self) -> float:</code> implementiert werden, die die Fläche des Kreises berechnet.

      unitTestFiles:
        - name: circle.py
          resourcePath: programming/7-classes/1-circle/circle_declaration.py
          fileType: python
          editable: false
        - name: test_circle.py
          resourcePath: programming/7-classes/1-circle/test_circle_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          cause: illegal_argument
          description: Die X-Koordinate sollte eine Ganz- oder Fließkommazahl sein.
        - id: 2
          shouldFail: true
          cause: logic_error
          description: Der Wert des Konstruktorarguments 'center_x' sollte unter dem selben Namen als Argument zugänglich sein.
        - id: 3
          shouldFail: true
          cause: illegal_argument
          description: Die Y-Koordinate sollte eine Ganz- oder Fließkommazahl sein.
        - id: 4
          shouldFail: true
          cause: logic_error
          description: Der Wert des Konstruktorarguments 'center_y' sollte unter dem selben Namen als Argument zugänglich sein.
        - id: 5
          shouldFail: true
          cause: illegal_argument
          description: Der Radius sollte eine Ganz- oder Fließkommazahl sein.
        - id: 6
          shouldFail: true
          cause: illegal_argument
          description: Der Radius sollte größer oder gleich 0 sein.
        - id: 7
          shouldFail: true
          cause: logic_error
          description: Der Wert des Konstruktorarguments 'radius' sollte unter dem selben Namen als Argument zugänglich sein.
        - id: 8
          shouldFail: true
          cause: wrong_result
          description: Die Fläche des Kreises sollte richtig berechnet werden
      testFileName: test_circle.py
      sampleSolFileNames: [test_circle.py]

    implementationPart:
      base: |
        from math import pi


        class Circle:
            def __init__(self, center_x: float, center_y: float, radius: float):
                pass

            def area(self) -> float:
                pass
      files:
        - name: test_circle.py
          resourcePath: programming/7-classes/1-circle/test_circle.py
          fileType: python
          editable: false
        - name: circle.py
          resourcePath: programming/7-classes/1-circle/circle_declaration.py
          fileType: python
          editable: true
      implFileName: circle.py
      sampleSolFileNames: [circle.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: circle.py
              resourcePath: programming/7-classes/1-circle/circle.py
              fileType: python
              editable: false
            - name: test_circle.py
              resourcePath: programming/7-classes/1-circle/test_circle.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Conditions
      - Exceptions
      - Classes
      - Math

- id: 2
  collectionId: 7
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Mau-Mau
  author: bje40dc
  text:
    relativePath: programming/7-classes/2-text.html
  state: APPROVED

  content:
    functionName: maumau
    foldername: maumau
    filename: maumau
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: maumau.py
          resourcePath: programming/7-classes/2-maumau/maumau_declaration.py
          fileType: python
          editable: false
        - name: test_maumau.py
          resourcePath: programming/7-classes/2-maumau/test_maumau_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion can_be_played_on soll ebenfalls true zurückgeben, falls die Bilder der beiden Karten übereinstimmen.
        - id: 2
          shouldFail: true
          description: Die Funktion can_be_played_on soll ebenfalls true zurückgeben, falls die Farben der beiden Karten übereinstimmen.
        - id: 3
          shouldFail: true
          description: Die Funktion can_be_played_on soll nur true zurückgeben, falls die Farben der beiden Karten übereinstimmen.
        - id: 4
          shouldFail: true
          description: Die Funktion can_be_played_on soll nur true zurückgeben, falls die Bilder der beiden Karten übereinstimmen.
        - id: 5
          shouldFail: true
          description: Die Funktion can_be_palyed_on soll true zurückgeben, falls entweder die Farben oder die Bilder der beiden Karten übereinstimmen.
        - id: 6
          shouldFail: true
          description: Die Funktion playable_cards soll die Handkarten zurückgeben, die spielbar sind.
        - id: 7
          shouldFail: true
          description: Die Funktion playable_cards soll alle Handkarten zurückgeben, die spielbar sind.
        - id: 8
          shouldFail: true
          description: Die Funktion playable_cards soll eine leere Liste zurückgeben, falls keine Handkarten vorhanden sind.
      testFileName: test_maumau.py
      sampleSolFileNames: [test_maumau.py]

    implementationPart:
      base: |
        from typing import List, Any


        class Card:
            def __init__(self, suit: int, rank: int):
                self.suit: int = suit
                self.rank: int = rank

            def __eq__(self, other: Any) -> bool:
                return isinstance(other, Card) and other.suit == self.suit and other.rank == self.rank  # pragma: no cover

            def __repr__(self) -> str:
                return "Card({}, {})".format(self.suit, self.rank)  # pragma: no cover


        def can_be_played_on(first_card: Card, second_card: Card) -> bool:
            pass


        def playable_cards(card: Card, hand: List[Card]) -> List[Card]:
            pass
      files:
        - name: test_maumau.py
          resourcePath: programming/7-classes/2-maumau/test_maumau.py
          fileType: python
          editable: false
        - name: maumau.py
          resourcePath: programming/7-classes/2-maumau/maumau_declaration.py
          fileType: python
          editable: true
      implFileName: maumau.py
      sampleSolFileNames: [maumau.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: maumau.py
              resourcePath: programming/7-classes/2-maumau/maumau.py
              fileType: python
              editable: false
            - name: test_maumau.py
              resourcePath: programming/7-classes/2-maumau/test_maumau.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Classes
      - Conditions
      - Lists
      - Strings

- id: 3
  collectionId: 7
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Vektor2D
  author: bje40dc
  text:
    relativePath: programming/7-classes/3-text.html
  state: APPROVED

  content:
    functionName: vector2d
    foldername: vector2d
    filename: vector2d
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: vector2d.py
          resourcePath: programming/7-classes/3-vector2d/vector2d_declaration.py
          fileType: python
          editable: false
        - name: test_vector2d.py
          resourcePath: programming/7-classes/3-vector2d/test_vector2d_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Der Wert des Konstruktorarguments 'x' sollte unter dem selben Namen als Argument zugänglich sein.
        - id: 2
          shouldFail: true
          description: Der Wert des Konstruktorarguments 'y' sollte unter dem selben Namen als Argument zugänglich sein.
        - id: 3
          shouldFail: true
          description: Die Funktion __repr__ soll die korrekte Koordinatenrepräsentation der Koordinate 'x' zurückgeben.
        - id: 4
          shouldFail: true
          description: Die Funktion __repr__ soll die korrekte Koordinatenrepräsentation der Koordinate 'y' zurückgeben.
        - id: 5
          shouldFail: true
          description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls sich zwei Vektoren gleichen.
        - id: 6
          shouldFail: true
          description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls sich zwei Vektoren nicht gleichen.
        - id: 7
          shouldFail: true
          description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls der Vektor2D mit einer Instanz verglichen wird, die kein Vektor2D ist.
        - id: 8
          shouldFail: true
          description: Die Funktion abs soll die korrekte Länge berechnen.
        - id: 9
          shouldFail: true
          description: Die Funktion abs soll die korrekte Länge berechnen.
        - id: 10
          shouldFail: true
          description: Die Funktion __add__ soll jeweils die x- und y-Koordinaten addieren.
        - id: 11
          shouldFail: true
          description: Die Funktion __add__ soll den korrekt berechneten Vektor nach der Addition zurückgeben.
        - id: 12
          shouldFail: true
          description: Die Funktion __sub__ soll jeweils die x- und y-Koordinaten subtrahieren.
        - id: 13
          shouldFail: true
          description: Die Funktion __sub__ soll den korrekt berechneten Vektor nach der Subtraktion zurückgeben.
        - id: 14
          shouldFail: true
          description: Die Funktion __mul__ soll jeweils die x- und y-Koordinaten mit dem übergebenen Wert multiplizieren.
        - id: 15
          shouldFail: true
          description: Die Funktion __mul__ soll den korrekt berechneten Vektor nach der Multiplikation zurückgeben.
        - id: 16
          shouldFail: true
          description: Die Funktion dot soll jeweils die x- und y-Koordinaten multiplizieren und anschließend das Ergebnis addieren.
        - id: 17
          shouldFail: true
          description: Die Funktion dot soll das korrekt berechnete Skalarprodukt zurückgeben.
      testFileName: test_vector2d.py
      sampleSolFileNames: [test_vector2d.py]

    implementationPart:
      base: |
        from typing import Any


        class Vector2D:
            def __init__(self, x: float, y: float):
                pass

            def __repr__(self) -> str:
                pass

            def __eq__(self, other: Any) -> bool:
                pass

            def abs(self) -> float:
                pass

            def __add__(self, other: 'Vector2D') -> 'Vector2D':
                pass

            def __sub__(self, other: 'Vector2D') -> 'Vector2D':
                pass

            def __mul__(self, scalar: float) -> 'Vector2D':
                pass

            def dot(self, other: 'Vector2D') -> float:
                pass
      files:
        - name: test_vector2d.py
          resourcePath: programming/7-classes/3-vector2d/test_vector2d.py
          fileType: python
          editable: false
        - name: vector2d.py
          resourcePath: programming/7-classes/3-vector2d/vector2d_declaration.py
          fileType: python
          editable: true
      implFileName: vector2d.py
      sampleSolFileNames: [vector2d.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: vector2d.py
              resourcePath: programming/7-classes/3-vector2d/vector2d.py
              fileType: python
              editable: false
            - name: test_vector2d.py
              resourcePath: programming/7-classes/3-vector2d/test_vector2d.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Classes
      - Strings
      - Math