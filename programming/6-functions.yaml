- id: 1
  collectionId: 6
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Temperaturen
  author: bje40dc
  text: >
    <p>
    Implementieren Sie folgende Funktionen. Diese bekommen jeweils eine Gleitkommazahl übergeben und sollen eine
    Gleitkommazahl zurückgeben.
    </p>
    <ul>
    <li>
    <code>def celsius_to_fahrenheit(degrees_celsius: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temperatur in Celsius mit der Formel $T_F = T_C \cdot 1,8 + 32$ in Fahrenheit umrechnen.
    </p>
    </li>
    <li>
    <code>def celsius_to_kelvin(degrees_celsius: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temperatur in Celsius mit der Formel $T_K = T_C - 273,15$ in Kelvin umrechnen.
    </p>
    </li>
    <li>
    <code>def kelvin_to_celsius(degrees_kelvin: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temparatur in Kelvin mit der Formel $T_C = T_K + 273,15$ in Celsius umwandeln.
    </p>
    </li>
    <li>
    <code>def kelvin_to_fahrenheit(degrees_kelvin: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temperatur in Kelvin mit der Formel $T_F = T_K \cdot 1,8 - 459,67$ in Fahrenheit umwandeln.
    </p>
    </li>
    <li>
    <code>def fahrenheit_to_celsius(degrees_fahrenheit: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temparatur in Fahrenheit mit der Formel $T_C = (T_F -32) \cdot 5 / 9$ in Celsius umwandeln.
    </p>
    </li>
    <li>
    <code>def fahrenheit_to_kelvin(degrees_fahrenheit: float) -> float:</code>
    <p>
    Diese Funktion soll eine Temparatur in Fahrenheit mit der Formel $T_K = (T_F + 459,67) \cdot 5 / 9$ in Kelvin
    umwandeln.
    </p>
    </li>
    </ul>
  state: APPROVED

  functionName: temperatures
  foldername: temperatures
  filename: temperatures
  inputTypes: []
  outputType: VOID

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - name: temperatures.py
        resourcePath: programming/6-functions/1-temperatures/temperatures_declaration.py
        fileType: python
        editable: false
      - name: test_temperatures.py
        resourcePath: programming/6-functions/1-temperatures/test_temperatures_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion celsius_to_fahrenheit soll die Temperatur korrekt von Celsius in Fahrenheit umrechnen.
      - id: 2
        shouldFail: true
        description: Die Funktion celsius_to_fahrenheit soll die Temperatur korrekt von Celsius in Fahrenheit umrechnen.
      - id: 3
        shouldFail: true
        description: Die Funktion celsius_to_kelvin soll die Temperatur korrekt von Celsius in Kelvin umrechnen.
      - id: 4
        shouldFail: true
        description: Die Funktion celsius_to_kelvin soll die Temperatur korrekt von Celsius in Kelvin umrechnen.
      - id: 5
        shouldFail: true
        description: Die Funktion fahrenheit_to_celsius soll die Temperatur korrekt von Fahrenheit in Celsius umrechnen.
      - id: 6
        shouldFail: true
        description: Die Funktion fahrenheit_to_celsius soll die Temperatur korrekt von Fahrenheit in Celsius umrechnen.
      - id: 7
        shouldFail: true
        description: Die Funktion fahrenheit_to_kelvin soll die Temperatur korrekt von Fahrenheit in Kelvin umrechnen.
      - id: 8
        shouldFail: true
        description: Die Funktion fahrenheit_to_kelvin soll die Temperatur korrekt von Fahrenheit in Kelvin umrechnen.
      - id: 9
        shouldFail: true
        description: Die Funktion kelvin_to_celsius soll die Temperatur korrekt von Kelvin in Celsius umrechnen.
      - id: 10
        shouldFail: true
        description: Die Funktion kelvin_to_celsius soll die Temperatur korrekt von Kelvin in Celsius umrechnen.
      - id: 11
        shouldFail: true
        description: Die Funktion kelvin_to_fahrenheit soll die Temperatur korrekt von Kelvin in Fahrenheit umrechnen.
      - id: 12
        shouldFail: true
        description: Die Funktion kelvin_to_fahrenheit soll die Temperatur korrekt von Kelvin in Fahrenheit umrechnen.
    testFileName: test_temperatures.py
    sampleSolFileNames: [test_temperatures.py]

  implementationPart:
    base: |
      def celsius_to_fahrenheit(degrees_celsius: float) -> float:
          pass


      def celsius_to_kelvin(degrees_celsius: float) -> float:
          pass


      def fahrenheit_to_celsius(degrees_fahrenheit: float) -> float:
          pass


      def fahrenheit_to_kelvin(degrees_fahrenheit: float) -> float:
          pass


      def kelvin_to_celsius(degrees_kelvin: float) -> float:
          pass


      def kelvin_to_fahrenheit(degrees_kelvin: float) -> float:
          pass
    files:
      - name: test_temperatures.py
        resourcePath: programming/6-functions/1-temperatures/test_temperatures.py
        fileType: python
        editable: false
      - name: temperatures.py
        resourcePath: programming/6-functions/1-temperatures/temperatures_declaration.py
        fileType: python
        editable: true
    implFileName: temperatures.py
    sampleSolFileNames: [temperatures.py]

  sampleSolutions:
    - id: 1
      sample:
        files:
          - name: temperatures.py
            resourcePath: programming/6-functions/1-temperatures/temperatures.py
            fileType: python
            editable: false
          - name: test_temperatures.py
            resourcePath: programming/6-functions/1-temperatures/test_temperatures.py
            fileType: python
            editable: false
        testData: []

  sampleTestData: []

  tags:
    - Math

- id: 2
  collectionId: 6
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Längen
  author: bje40dc
  text: >
    <p>
    Gegeben sind folgende Längeneinheiten:
    </p>
    <ul>
    <li>
    Yards: <code>1 yd = 0,9144 m</code>
    </li>
    <li>
    Meilen: <code>1 mile = 1.609,344 m</code>
    </li>
    <li>
    Seemeile: <code>1 sm = 1852 m</code>
    </li>
    <li>
    Inch: <code>1 in = 2.54 cm</code>
    </li>
    </ul>
    <p>
    Implementieren Sie (nach obigem Muster) die folgenden Funktionen:
    </p>
    <ul>
    <li>
    <code>def yards_to_meters(length_yards: float) -> float</code>
    </li>
    <li>
    <code>def meters_to_yards(length_meters: float) -> float</code>
    </li>
    <li>
    <code>def miles_to_meters(length_miles: float) -> float</code>
    </li>
    <li>
    <code>def meters_to_miles(length_meters: float) -> float</code>
    </li>
    <li>
    <code>def seamiles_to_meters(length_sea_miles: float) -> float</code>
    </li>
    <li>
    <code>def meters_to_seamiles(length_meters: float) -> float</code>
    </li>
    <li>
    <code>def inches_to_meters(length_inches: float) -> float</code>
    </li>
    <li>
    <code>def meters_to_inches(length_meters: float) -> float</code>
    </li>
    </ul>
  state: APPROVED

  functionName: distances
  foldername: distances
  filename: distances
  inputTypes: []
  outputType: VOID

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - name: distances.py
        resourcePath: programming/6-functions/2-distances/distances_declaration.py
        fileType: python
        editable: false
      - name: test_distances.py
        resourcePath: programming/6-functions/2-distances/test_distances_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion yards_to_meters soll die Distanz korrekt von Yards in Meter umrechnen.
      - id: 2
        shouldFail: true
        description: Die Funktion yards_to_meters soll die Distanz korrekt von Yards in Meter umrechnen.
      - id: 3
        shouldFail: true
        description: Die Funktion meters_to_yards soll die Distanz korrekt von Meter in Yards umrechnen.
      - id: 4
        shouldFail: true
        description: Die Funktion meters_to_yards soll die Distanz korrekt von Meter in Yards umrechnen.
      - id: 5
        shouldFail: true
        description: Die Funktion miles_to_meters soll die Distanz korrekt von Meilen in Meter umrechnen.
      - id: 6
        shouldFail: true
        description: Die Funktion miles_to_meters soll die Distanz korrekt von Meilen in Meter umrechnen.
      - id: 7
        shouldFail: true
        description: Die Funktion meters_to_miles soll die Distanz korrekt von Meter in Meilen umrechnen.
      - id: 8
        shouldFail: true
        description: Die Funktion meters_to_miles soll die Distanz korrekt von Meter in Meilen umrechnen.
      - id: 9
        shouldFail: true
        description: Die Funktion seamiles_to_meters soll die Distanz korrekt von Seemeilen in Meter umrechnen.
      - id: 10
        shouldFail: true
        description: Die Funktion seamiles_to_meters soll die Distanz korrekt von Seemeilen in Meter umrechnen.
      - id: 11
        shouldFail: true
        description: Die Funktion meters_to_seamiles soll die Distanz korrekt von Meter in Seemeilen umrechnen.
      - id: 12
        shouldFail: true
        description: Die Funktion meters_to_seamiles soll die Distanz korrekt von Meter in Seemeilen umrechnen.
      - id: 13
        shouldFail: true
        description: Die Funktion inches_to_meters soll die Distanz korrekt von Zoll in Meter umrechnen.
      - id: 14
        shouldFail: true
        description: Die Funktion inches_to_meters soll die Distanz korrekt von Zoll in Meter umrechnen.
      - id: 15
        shouldFail: true
        description: Die Funktion meters_to_inches soll die Distanz korrekt von Meter in Zoll umrechnen.
      - id: 16
        shouldFail: true
        description: Die Funktion meters_to_inches soll die Distanz korrekt von Meter in Zoll umrechnen.
    testFileName: test_distances.py
    sampleSolFileNames: [test_distances.py]

  implementationPart:
    base: |
      def yards_to_meters(length_yards: float) -> float:
          pass


      def meters_to_yards(length_meters: float) -> float:
          pass


      def miles_to_meters(length_miles: float) -> float:
          pass


      def meters_to_miles(length_meters: float) -> float:
          pass


      def seamiles_to_meters(length_sea_miles: float) -> float:
          pass


      def meters_to_seamiles(length_meters: float) -> float:
          pass


      def inches_to_meters(length_inches: float) -> float:
          pass


      def meters_to_inches(length_meters: float) -> float:
          pass
    files:
      - name: test_distances.py
        resourcePath: programming/6-functions/2-distances/test_distances.py
        fileType: python
        editable: false
      - name: distances.py
        resourcePath: programming/6-functions/2-distances/distances_declaration.py
        fileType: python
        editable: true
    implFileName: distances.py
    sampleSolFileNames: [distances.py]

  sampleSolutions:
    - id: 1
      sample:
        files:
          - name: distances.py
            resourcePath: programming/6-functions/2-distances/distances.py
            fileType: python
            editable: false
          - name: test_distances.py
            resourcePath: programming/6-functions/2-distances/test_distances.py
            fileType: python
            editable: false
        testData: []

  sampleTestData: []

  tags:
    - Math