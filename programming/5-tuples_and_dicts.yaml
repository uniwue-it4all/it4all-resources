- id: 1
  collectionId: 5
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Tupel
  author: bje40dc
  text: >
    <p>
    Hinweise:
    </p>
    <ul>
    <li>
    Sie sollten die Aufgaben zu Listen bereits gelöst haben, da Listen als bekannt vorausgesetzt werden.
    </li>
    <li>
    Einige Aufgaben setzen erweitertes Wissen über Strings wie zum Beispiel die Iteration über einzelne Buchstaben oder
    das Trennen von Strings an bestimmten Zeichen voraus.
    </li>
    </ul>
    <h3>Tupel</h3>
    <ul>
    <li>
    <code>def min_max(my_list: List[int]) -> Tuple[int, int]:</code>
    <p>
    Diese Funktion soll aus der Liste von Ganzzahlen das Minimum und das Maximum extrahieren und zurückgeben.
    </p>
    <p>
    Hinweise:
    </p>
    <ul>
    <li>
    Benutzen Sie nicht die Funktionen <code>min()</code> und <code>max()</code>
    </li>
    <li>
    Sie müssen nur einmal über die Liste iterieren
    </li>
    </ul>
    </ul>
    <p>
    Die folgenden Aufgaben bekommen jeweils eine Liste von Aktien übergeben. Diese Aktien werden als Tuple aus Name (als
    String) und Wert (in Cent, als Ganzzahl) dargestellt.
    </p>
    <ul>
    <li>
    <code>def account_value(stocks: List[Tuple[str, int]]) -> float:</code>
    <p>
    Diese Funktion soll den Gesamtwert aller Aktien in Euro berechnen.
    </p>
    </li>
    <li>
    <code>def stock_value(stocks: List[Tuple[str, int]], name: str) -> int:</code>
    <p>
    Diese Funktion soll den Wert der Aktie mit den Namen <code>name</code> aus der Liste heraussuchen. Sollte keine Aktie mit dem
    Namen existieren, soll -1 zurückgegeben werden.
    </p>
    </li>
    </ul>
    </li>
    </ul>
  status: APPROVED

  functionname: tuples
  foldername: tuples
  filename: tuples
  inputTypes: []
  outputType: None

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - path: tuples.py
        resourcePath: programming/5-tuples_and_dicts/1-tuples/tuples_declaration.py
        fileType: python
        editable: false
      - path: test_tuples.py
        resourcePath: programming/5-tuples_and_dicts/1-tuples/test_tuples_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion min_max soll für Listen mit einem Element das korrekte Minimum und Maximum zurückgeben.
      - id: 2
        shouldFail: true
        description: Die Funktion min_max soll für Listen mit mehr als einem Element das korrekte Minimum und Maximum zurückgeben.
      - id: 3
        shouldFail: true
        description: Die Funktion account_value soll den korrekten Gesamtwert aller Aktien berechnen.
      - id: 4
        shouldFail: true
        description: Die Funktion account_value soll den Gesamtwert in Euro berechnen.
      - id: 5
        shouldFail: true
        description: Die Funktion account_value soll 0 zurückgeben, falls die übergebene Liste leer ist.
      - id: 6
        shouldFail: true
        description: Falls eine Aktie mit dem übergebenen Namen in der übergebenen Liste vorhanden ist, soll die Funktion stock_value den korrekten Wert der Aktie zurückgeben.
      - id: 7
        shouldFail: true
        description: Falls keine Aktie mit dem übergebenen Namen in der übergebenen Liste vorhanden ist, soll die Funktion stock_value -1 zurückgeben.
      - id: 8
        shouldFail: true
        description: Falls die übergebene Liste leer ist, soll die Funktion stock_value -1 zurückgeben.
    testFileName: test_tuples.py
    sampleSolFileNames: [test_tuples.py]

  implementationPart:
    base: |
      from typing import Tuple, List


      def min_max(my_list: List[int]) -> Tuple[int, int]:
          pass


      def account_value(stocks: List[Tuple[str, int]]) -> float:
          pass


      def stock_value(stocks: List[Tuple[str, int]], name: str) -> int:
          pass
    files:
      - path: test_tuples.py
        resourcePath: programming/5-tuples_and_dicts/1-tuples/test_tuples.py
        fileType: python
        editable: false
      - path: tuples.py
        resourcePath: programming/5-tuples_and_dicts/1-tuples/tuples_declaration.py
        fileType: python
        editable: true
    implFileName: tuples.py
    sampleSolFileNames: [tuples.py]

  sampleSolutions:
    - id: 1
      files:
        - path: tuples.py
          resourcePath: programming/5-tuples_and_dicts/1-tuples/tuples.py
          fileType: python
          editable: false
        - path: test_tuples.py
          resourcePath: programming/5-tuples_and_dicts/1-tuples/test_tuples.py
          fileType: python
          editable: false

  sampleTestData: []

- id: 2
  collectionId: 5
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Dictionaries
  author: bje40dc
  text: >
    <p>
    Hinweise:
    </p>
    <ul>
    <li>
    Sie sollten die Aufgaben zu Listen bereits gelöst haben, da Listen als bekannt vorausgesetzt werden.
    </li>
    <li>
    Einige Aufgaben setzen erweitertes Wissen über Strings wie zum Beispiel die Iteration über einzelne Buchstaben oder
    das Trennen von Strings an bestimmten Zeichen voraus.
    </li>
    </ul>
    <h3>Dictionaries</h3>
    <ul>
    <li>
    <code>def count_char_occurences(my_str: str) -> Dict[str, int]:</code>
    <p>
    Diese Funktion bekommt einen String übergeben und soll zählen, wie oft jeder einzelne Buchstabe darin vorkommt. Es
    soll dabei nicht zwischen Groß- und Kleinschreibung unterschieden werden.
    </p>
    <p>
    Hinweis: Wandeln Sie zuerst alle Groß- in Kleinbuchstaben um.
    </p>
    </li>
    <li>
    <code>def word_position_list(my_str: str) -> Dict[str, List[int]]:</code>
    <p>
    Diese Funktion bekommt einen Text übergeben, der nur aus Kleinbuchstaben und Leerzeichen besteht. Sie soll für jedes
    Wort im Text die Indizes über die Wörter berechnen. Es ist immer mindestens ein Wort im Text.
    </p>
    <p>
    Beispiel: Im Text <code>dies ist ein test</code> lautet das Ergebnis <code>{"dies": [0], "ist": [1], "ein": [2], "test": [3]}</code>
    </p>
    </li>
    <li>
    <code>def merge_dicts_with_add(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:</code>
    <p>
    Diese Funktion soll aus zwei Dictionaries ein neues machen. Sollte ein Schlüssel in beiden Ausgangsdictionaries
    vorhanden sein, sollen die Werte im Ergebnisdictionary addiert werden.
    </p>
    </li>
    </ul>
  status: APPROVED

  functionname: dicts
  foldername: dicts
  filename: dicts
  inputTypes: []
  outputType: None

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - path: dicts.py
        resourcePath: programming/5-tuples_and_dicts/2-dicts/dicts_declaration.py
        fileType: python
        editable: false
      - path: test_dicts.py
        resourcePath: programming/5-tuples_and_dicts/2-dicts/test_dicts_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion count_char_occurences soll nicht zwischen Groß- und Kleinschreibung unterscheiden.
      - id: 2
        shouldFail: true
        description: Die Funktion count_char_occurences soll die einzelnen Buchstaben korrekt zählen.
      - id: 3
        shouldFail: true
        description: Falls der übergebene String leer ist, soll die Funktion count_char_occurences ein leeres Dictionary zurückgeben.
      - id: 4
        shouldFail: true
        description: Die Funktion word_position_list soll die korrekten Indizes der Wörter angeben.
      - id: 5
        shouldFail: true
        description: Die Funktion word_position_list soll alle Indizes angeben, falls ein Wort mehrmals vorkommt.
      - id: 6
        shouldFail: true
        description: Falls der übergebene String leer ist, soll die Funktion word_position_list ein leeres Dictionary zurückgeben. !!!TODO - Falls der Test self.assertEqual({}, word_position_list("")) eingefügt wird, werden auch alle anderen Tests der anderen Methoden grün!!!
      - id: 7
        shouldFail: true
        description: Die Funktion merge_dicts_with_add soll die beiden Dictionaries zusammenfügen.
      - id: 8
        shouldFail: true
        description: Die Funktion merge_dicts_with_add soll die Werte im Ergebnisdictionary, bei gleichen Schlüsseln in den Ausgangsdictionaries, addieren.
      - id: 9
        shouldFail: true
        description: Falls beide Ausgangsdictionaries leer sind, soll die Funktion merge_dicts_with_add ein leeres Dictionary zurückgeben.
    testFileName: test_dicts.py
    sampleSolFileNames: [test_dicts.py]

  implementationPart:
    base: |
      from typing import Dict, List


      def count_char_occurrences(my_str: str) -> Dict[str, int]:
          pass


      def word_position_list(my_str: str) -> Dict[str, List[int]]:
          pass


      def merge_dicts_with_add(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:
          pass
    files:
      - path: test_dicts.py
        resourcePath: programming/5-tuples_and_dicts/2-dicts/test_dicts.py
        fileType: python
        editable: false
      - path: dicts.py
        resourcePath: programming/5-tuples_and_dicts/2-dicts/dicts_declaration.py
        fileType: python
        editable: true
    implFileName: dicts.py
    sampleSolFileNames: [dicts.py]

  sampleSolutions:
    - id: 1
      files:
        - path: dicts.py
          resourcePath: programming/5-tuples_and_dicts/2-dicts/dicts.py
          fileType: python
          editable: false
        - path: test_dicts.py
          resourcePath: programming/5-tuples_and_dicts/2-dicts/test_dicts.py
          fileType: python
          editable: false

  sampleTestData: []

- id: 3
  collectionId: 5
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Tupel und Dictionaries
  author: bje40dc
  text: >
    <p>
    Hinweise:
    </p>
    <ul>
    <li>
    Sie sollten die Aufgaben zu Listen bereits gelöst haben, da Listen als bekannt vorausgesetzt werden.
    </li>
    <li>
    Einige Aufgaben setzen erweitertes Wissen über Strings wie zum Beispiel die Iteration über einzelne Buchstaben oder
    das Trennen von Strings an bestimmten Zeichen voraus.
    </li>
    </ul>
    <h3>Tupel und Dictionaries</h3>
    <ul>
    <li>
    <code>def tuple_list_to_dict(my_list: List[Tuple[str, int]]) -> Dict[str, int]:</code>
    <p>
    Diese Funktion soll eine Liste von Tuples in ein Dictionary umwandeln. Dabei soll der erste Eintrag im Tuple als
    Schlüssel und der zweite Eintrag als Wert verwendet werden. Sollte ein Schlüssel in mehreren Tuples vorkommen, soll
    der erste Wert verwendet werden.
    </p>
    </li>
    <li>
    <code>def intersect_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, Tuple[int, int]]:</code>
    <p>
    Diese Funktion soll die Übereinstimmungen von zwei Dictionaries in ein neues schreiben. Falls ein Schlüssel in beiden
    Dicts vorhanden ist, sollen die Werte in beiden Ausgangsdicts als Tuple im Resultat stehen.
    </p>
    </li>
    </ul>
  status: APPROVED

  functionname: tuples_and_dicts
  foldername: tuples_and_dicts
  filename: tuples_and_dicts
  inputTypes: []
  outputType: None

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - path: tuples_and_dicts.py
        resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/tuples_and_dicts_declaration.py
        fileType: python
        editable: false
      - path: test_tuples_and_dicts.py
        resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/test_tuples_and_dicts_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion tuple_list_to_dict soll den ersten Eintrag im Tupel als Schlüssel und den zweiten Eintrag als Wert setzen.
      - id: 2
        shouldFail: true
        description: Die Funktion tuple_list_to_dict soll den ersten Wert verwenden, falls ein Schlüssel mehrmals vorkommt.
      - id: 3
        shouldFail: true
        description: Die Funktion tuple_list_to_dict soll ein leeres Dictionary zurückgeben, falls eine leere Liste übergeben wird.
      - id: 4
        shouldFail: true
        description: Die Funktion intersect_dicts soll ein leeres Dictionary zurückgeben, falls keine übereinstimmenden Schlüsseln in den übergebenen Dictionaries existieren.
      - id: 5
        shouldFail: true
        description: Die Funktion intersect_dicts soll ein Dictionary mit den korrekten Werten bei übereinstimmenden Schlüsseln zurückgeben.
      - id: 6
        shouldFail: true
        description: Die Funktion intersect_dicts soll ein leeres Dictionary zurückgeben, falls die beiden übergebenen Dictionaries leer sind.
    testFileName: test_tuples_and_dicts.py
    sampleSolFileNames: [test_tuples_and_dicts.py]

  implementationPart:
    base: |
      from typing import Dict, List, Tuple


      def tuple_list_to_dict(my_list: List[Tuple[str, int]]) -> Dict[str, int]:
          pass


      def intersect_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, Tuple[int, int]]:
          pass
    files:
      - path: test_tuples_and_dicts.py
        resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/test_tuples_and_dicts.py
        fileType: python
        editable: false
      - path: tuples_and_dicts.py
        resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/tuples_and_dicts_declaration.py
        fileType: python
        editable: true
    implFileName: tuples_and_dicts.py
    sampleSolFileNames: [tuples_and_dicts.py]

  sampleSolutions:
    - id: 1
      files:
        - path: tuples_and_dicts.py
          resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/tuples_and_dicts.py
          fileType: python
          editable: false
        - path: test_tuples_and_dicts.py
          resourcePath: programming/5-tuples_and_dicts/3-tuples_and_dicts/test_tuples_and_dicts.py
          fileType: python
          editable: false

  sampleTestData: []

- id: 4
  collectionId: 5
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Fitnessprogramm
  author: bje40dc
  text: >
    <p>
    Hinweise:
    </p>
    <ul>
    <li>
    Sie sollten die Aufgaben zu Listen bereits gelöst haben, da Listen als bekannt vorausgesetzt werden.
    </li>
    <li>
    Einige Aufgaben setzen erweitertes Wissen über Strings wie zum Beispiel die Iteration über einzelne Buchstaben oder
    das Trennen von Strings an bestimmten Zeichen voraus.
    </li>
    </ul>
    <h3>Fitnessprogramm</h3>
    <p>
    Der Weihnachtsmann muss seine Rentiere für die lange Reise wieder in Topform bringen. Dafür muss er wissen, welche Tiere
    Kraftfutter brauchen und welche etwas weniger. Dazu sollen Sie den BMI der Rentiere berechnen.
    </p>
    <p>
    Der BMI $b$ der Rentiere berechnet sich aus dem Gewicht $w_{kg}$ (in kg) und der Größe $h_m$ (in m):
    </p>
    <p>
    $$ b = \frac{w_{kg}}{h_m^2} $$
    </p>
    <p>
    <code>
    from typing import Dict<br><br>

    reindeers: Dict[str, Dict[str, int]] = {<br>
    &nbsp;&nbsp;"Rudolph": {"age_years": 2, "height_cm": 200, "weight_kg": 120},<br>
    &nbsp;&nbsp;"Comet": {"age_years": 1, "height_cm": 180, "weight_kg": 100},<br>
    &nbsp;&nbsp;"Doner": {"age_years": 3, "height_cm": 210, "weight_kg": 90},<br>
    &nbsp;&nbsp;"Blizzen": {"age_years": 4, "height_cm": 190, "weight_kg": 200},<br>
    &nbsp;&nbsp;"Cupid": {"age_years": 2, "height_cm": 192, "weight_kg": 121},<br>
    &nbsp;&nbsp;"Prancer": {"age_years": 4, "height_cm": 215, "weight_kg": 134},<br>
    &nbsp;&nbsp;"Vixen": {"age_years": 6, "height_cm": 230, "weight_kg": 143},<br>
    &nbsp;&nbsp;"Dancer": {"age_years": 1, "height_cm": 176, "weight_kg": 82},<br>
    &nbsp;&nbsp;"Dasher": {"age_years": 5, "height_cm": 197, "weight_kg": 101}<br>
    }
    </code>
    </p>
    <ul>
    <li>
    <code>def bmi(height_cm: int, weight_km: int) -> float:</code>
    </li>
    <li>
    <code>def calculate_bmi(reindeers: Dict[str, Dict[str, int]]) -> Dict[str, float]:</code>
    <p>
    Diese Funktion soll in einem neuen Dictionary jeweils den Namen eines Rentiers und dessen BMI zurückgeben.
    </p>
    </li>
    </ul>
  status: APPROVED

  functionname: reindeers
  foldername: reindeers
  filename: reindeers
  inputTypes: []
  outputType: None

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - path: reindeers.py
        resourcePath: programming/5-tuples_and_dicts/4-reindeers/reindeers_declaration.py
        fileType: python
        editable: false
      - path: test_reindeers.py
        resourcePath: programming/5-tuples_and_dicts/4-reindeers/test_reindeers_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
      - id: 1
        shouldFail: true
        description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
      - id: 2
        shouldFail: true
        description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
      - id: 3
        shouldFail: true
        description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
      - id: 4
        shouldFail: true
        description: Die Funktion calculate_reindeer_bmis soll den korrekten BMI für jedes Rentier zurückgeben.
      - id: 5
        shouldFail: true
        description: Die Funktion calculate_reindeer_bmis soll den korrekten Namen für jedes Rentier zurückgeben.
      - id: 6
        shouldFail: true
        description: Die Funktion calculate_reindeer_bmis soll ein leeres Dictionary zurückgeben, falls das übergebene Dictionary leer ist.
    testFileName: test_reindeers.py
    sampleSolFileNames: [test_reindeers.py]

  implementationPart:
    base: |
      from typing import Dict


      def calculate_bmi(height_cm: int, weight_kg: int) -> float:
          pass


      def calculate_reindeer_bmis(reindeers: Dict[str, Dict[str, int]]) -> Dict[str, float]:
          pass
    files:
      - path: test_reindeers.py
        resourcePath: programming/5-tuples_and_dicts/4-reindeers/test_reindeers.py
        fileType: python
        editable: false
      - path: reindeers.py
        resourcePath: programming/5-tuples_and_dicts/4-reindeers/reindeers_declaration.py
        fileType: python
        editable: true
    implFileName: reindeers.py
    sampleSolFileNames: [reindeers.py]

  sampleSolutions:
    - id: 1
      files:
        - path: reindeers.py
          resourcePath: programming/5-tuples_and_dicts/4-reindeers/reindeers.py
          fileType: python
          editable: false
        - path: test_reindeers.py
          resourcePath: programming/5-tuples_and_dicts/4-reindeers/test_reindeers.py
          fileType: python
          editable: false

  sampleTestData: []