- id: 1
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Alles über die Autoren
  author: bje40dc
  text: Geben Sie alle Spalten der Autorentabelle aus!
  state: APPROVED

  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT *
            FROM authors;
      - id: 2
        sample: |
          SELECT id, first_name, family_name, birthday
            FROM authors;
    tags: []
    hint: null

- id: 2
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Nachnamen aller Autoren
  author: bje40dc
  text: Geben Sie die Nachnamen aller Autoren aus!
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT family_name
            FROM authors;
    tags: []
    hint: null

- id: 3
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Verlagsnamen
  author: bje40dc
  text: Geben Sie die Namen aller Verlage aus!
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT name
            FROM publishers;
    tags: []
    hint: null

- id: 4
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Namen aller Kunden
  author: bje40dc
  text: Geben Sie die Vor- und Nachnamen aller Kunden aus!
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT first_name, family_name
            FROM customers;
    tags: []
    hint: null

- id: 5
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Daten über Bücher
  author: bje40dc
  text: Geben Sie für jedes Buch jeweils den Titel das Erscheinungsjahr und die ISBN aus!
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, year, isbn
            FROM books;
    tags: []
    hint: null

- id: 6
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Titelsuche
  author: bje40dc
  text: Bestimmen Sie den Titel des Buches mit der ISBN '978-3551354051' (ohne Anführungszeichen).
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title
            FROM books
            WHERE isbn = '978-3551354051';
    tags: []
    hint: null

- id: 7
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Preissuche
  author: bje40dc
  text: Bestimmen Sie den Preis des Buches mit der ISBN '978-3551354068' (ohne Anführungszeichen).
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT price
            FROM books
            WHERE isbn = '978-3551354068';
    tags: []
    hint: null

- id: 8
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Autorensuche
  author: bje40dc
  text: Bestimmen Sie den Vor- und Nachnamen des Autoren mit der ID 3.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT first_name, family_name
            FROM authors
            WHERE id = 3;
    tags: []
    hint: null

- id: 9
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Der kleine Prinz?
  author: bje40dc
  text: Bestimmen Sie die Autor-ID des Buches 'Der kleine Prinz' (ohne Anführungszeichen).
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT author_id
            FROM books
            WHERE title = 'Der kleine Prinz';
    tags: []
    hint: null

- id: 10
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Verlag mit Telefonnummer
  author: bje40dc
  text: Bestimmen Sie den Namen des Verlages der unter der Telefonnummer '+49 2402 / 806341' erreichbar ist.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT name
            FROM publishers
            WHERE phone = '+49 2402 / 806341';
    tags: []
    hint: null

- id: 11
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Wer schrieb was?
  author: bje40dc
  text: Ordnen Sie allen Büchern ihre jeweiligen Autoren zu. Geben Sie jeweils den Titel des Buches und den Nachnamen des Autoren aus!
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, family_name
            FROM authors
              JOIN books ON authors.id = books.author_id;
    tags: [SQL_JOIN]
    hint: null

- id: 12
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Bücher von Carlsen
  author: bje40dc
  text: Bestimmen Sie Titel und Preis aller Bücher die im Verlag 'Carlsen' erschienen sind.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, price
            FROM books
              JOIN publishers ON publisher_id = publishers.id
            WHERE name = 'Carlsen';
    tags: [SQL_JOIN]
    hint: Die Zuordnung von Verlag-Id zu Verlag-Name befindet sich in der Tabelle 'publishers'.

- id: 13
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Harry Potters Leben
  author: bje40dc
  text: Bestimmen Sie Titel und ISBN sämtlicher Bücher der Autorin 'Rowling' (ohne Anführungszeichen).
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, isbn
            FROM books
              JOIN authors on books.author_id = authors.id
            WHERE family_name = 'Rowling'
    tags: [SQL_JOIN]
    hint: null

- id: 14
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Wilhards Wertungen
  author: bje40dc
  text: Zeigen Sie die Werte aller Ratings an, die der Kunde mit der Email 'wilhard_1041@web.de' abgegeben hat.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT rating
            FROM ratings
              JOIN customers ON ratings.customer_id = customers.id
            WHERE email = 'wilhard_1041@web.de';
    tags: [SQL_JOIN]
    hint: null

- id: 15
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Wer hat hier so viel bestellt?
  author: bje40dc
  text: Wie lauten die Nachnamen der Kunden, die mindestens 3 Bestellung aufgegeben haben?
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT DISTINCT family_name
            FROM orders
              JOIN customers ON orders.customer_id = customers.id
            WHERE orders.id >= 3;
    tags: [SQL_JOIN]
    hint: Diese Bestellungen haben eine ID von mindestens 3.

- id: 16
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: GMX-Kunden
  author: bje40dc
  text: Geben Sie alle Email-Adressen der Kunden aus die mit 'gmx.de' enden.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT email
            FROM customers
            WHERE email LIKE '%gmx.de';
    tags: []
    hint: Verwenden Sie für die Eingrenzung der Mailadresse den 'LIKE'-Operator.

- id: 17
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Billige Bücher
  author: bje40dc
  text: Geben Sie die Titel aller Bücher aus die weniger als 10,00 € kosten.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
      - id: 2
        sample: |
          SELECT title
            FROM books WHERE price < 10.00
    tags: []
    hint: null

- id: 18
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Was wird gewünscht?
  author: bje40dc
  text: Geben die die IDs aller Bücher aus, die von Kunden gewünscht werden. Achten Sie darauf, dass eine ID nur einmal vorkommt.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT DISTINCT book_id
            FROM wishlists;
    tags: []
    hint: null

- id: 19
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Jahrgang 81
  author: bje40dc
  text: Wählen Sie die Vor- und Nachnamen der Kunden aus, die im Jahr 1981 Geburtstag haben.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT first_name, family_name
            FROM customers
            WHERE birthday LIKE '1981-%';
    hint: Verwenden Sie den 'LIKE'-Operator zu Vergleich des Jahres.
    tags: []

- id: 20
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Geringer Bestand oder Preis
  author: bje40dc
  text: Geben Sie die Titel aller Bücher aus, die einen Bestand von weniger als 20.000 Exemplaren oder einen Preis unter 14€ haben.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title
            FROM books
            WHERE stock < 20000
               OR price < 14.00;
      - id: 2
        sample: |
          SELECT title
            FROM books
            WHERE stock < 20000
               OR price < 14;
    tags: []
    hint: null

- id: 21
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Sterne in der Wüste 1
  author: bje40dc
  text: Wie oft wurde das Buch 'Die Stadt in der Wüste' bewertet? Nennen Sie die Spalte 'Anzahl'.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT COUNT(*) AS Anzahl
            FROM ratings
              JOIN books ON books.id = ratings.book_id
            WHERE title = 'Die Stadt in der Wüste';
    tags: [SQL_FUNCTION, SQL_JOIN, SQL_ALIAS]
    hint: null

- id: 22
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Sterne in der Wüste 2
  author: bje40dc
  text: Welche Durchschnittsbewertung bekam das Buch 'Die Stadt in der Wüste'? Nennen Sie die Spalte 'Durchschnitt'.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT AVG(rating) AS Durchschnitt
            FROM ratings
              JOIN books ON books.id = ratings.book_id
            WHERE title = 'Die Stadt in der Wüste';
    tags: [SQL_FUNCTION, SQL_JOIN, SQL_ALIAS]
    hint: null

- id: 23
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Harry Potters
  author: bje40dc
  text: Wie hoch ist der Gesamtbestand an Harry Potter-Büchern? Nennen Sie die Spalte 'Gesamtbestand'.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT SUM(stock) AS Gesamtbestand
            FROM books
            WHERE title like 'Harry Potter%';
    tags: [SQL_FUNCTION, SQL_ALIAS]
    hint: null

- id: 24
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Fan oder nicht?
  author: bje40dc
  text: >
    Geben Sie jeweils die schlechteste und beste Bewertung des Buches 'Harry Potter und der Halbblutprinz' aus. Nennen Sie
    die Spalten jeweils 'Schlechteste' und 'Beste'.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT min(rating) AS Schlechteste, max(rating) AS Beste
            FROM books
              JOIN ratings ON books.id = ratings.book_id
            WHERE title = 'Harry Potter und der Halbblutprinz';
    tags: [SQL_FUNCTION, SQL_ALIAS, SQL_JOIN]
    hint: null

- id: 25
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Durschnittlicher Bestand
  author: bje40dc
  text: Wie hoch ist der durchschnittliche Bestand aller Bücher? Nennen Sie die Spalte 'Durchschnitt'
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT AVG(stock) AS Durchschnitt
            FROM books;
    tags: [SQL_FUNCTION, SQL_ALIAS]
    hint: null

- id: 26
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Wunsch des Phönix
  author: bje40dc
  text: Wie lauten die Nachnamen der Kunden die sich das Buch 'Harry Potter und der Orden des Phönix' wünschen?
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT family_name
            FROM customers
              JOIN wishlists ON wishlists.customer_id = customers.id
              JOIN books on wishlists.book_id = books.id
            WHERE title = 'Harry Potter und der Orden des Phönix';
    tags: [SQL_DOUBLE_JOIN]
    hint: null

- id: 27
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Orwellianisch
  author: bje40dc
  text: Suchen Sie die Titel aller Bücher, deren Autor George Orwell ist. Ordnen Sie die Titel nach Erscheinungsjahr abwärts.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title
            FROM books
              JOIN authors on books.author_id = authors.id
            WHERE first_name = 'George'
            AND family_name = 'Orwell'
            ORDER BY year DESC;
    tags: [SQL_ORDER_BY, SQL_JOIN]
    hint: null

- id: 28
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Teuer, teuer und teuer
  author: bje40dc
  text: Zeigen sie Titel und Autor-ID der drei teuersten Bücher an. Sortieren Sie die Einträge nach Preis abwärts.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, author_id
            FROM books
            ORDER BY price DESC
            LIMIT 3;
    tags: [SQL_ORDER_BY, SQL_LIMIT]
    hint: null

- id: 29
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Wer will Harry?
  author: bje40dc
  text: >
    Wählen Sie alle Bestellungen aus, die das Buch 'Harry Potter und der Halbblutprinz' enthalten. Geben Sie für diese
    Bestellungen jeweils das Datum und die Anzahl der bestellten Exemplare des Buches aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT date, amount
           FROM orders
              JOIN order_positions ON orders.id = order_id
              JOIN books ON books.id = book_id
              WHERE title = 'Harry Potter und der Halbblutprinz';
    tags: [SQL_DOUBLE_JOIN]
    hint: null

- id: 30
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Emails mit G
  author: bje40dc
  text: Geben Sie alle Email-Adressen der Kunden aus die mit 'gmx.de ' oder mit 'gmail.com' enden.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT email
            FROM customers
            WHERE email LIKE '%gmx.de'
            OR email LIKE '%gmail.com';
    tags: []
    hint: null

- id: 31
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Tolkien in Billig
  author: bje40dc
  text: >
    Bestimmen Sie Titel und Preis aller Bücher des Autors 'Tolkien' deren Preis über 10€ liegt. Ordnen Sie die
    Einträge nach Erscheinungsjahr abwärts.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT title, price
            FROM books
              JOIN authors on authors.id = books.author_id
            WHERE authors.family_name = 'Tolkien'
            AND price > 10
            ORDER BY year DESC;
    tags: [SQL_ORDER_BY]
    hint: null

- id: 32
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Billig gekauft
  author: bje40dc
  text: >
    Berechnen Sie die Anzahl der bestellten Buchexemplare (Tabelle order_positions) die zum Zeitpunkt des Kaufes weniger als
    fünf Euro gekostet haben. Geben Sie das Ergebnis unter dem Spaltenname 'Anzahl' aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT SUM(amount) AS Anzahl
            FROM order_positions WHERE price < 5;
      - id: 2
        sample:
          SELECT SUM(amount) AS Anzahl
          FROM order_positions WHERE price < 5.00;
    tags: [SQL_FUNCTION, SQL_ALIAS]
    hint: null

- id: 33
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Kumulierter Bestand
  author: bje40dc
  text: >
    Erfassen Sie die ID aller Autoren und den kumulierten Bestand ihrer Bücher. Ordnen Sie die Einträge nach kumulierten
    Bestand abwärts. Benennen Sie die Spalte des kumulierten Bestandes 'stock_sum' (ohne Anführungszeichen).
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT author_id, sum(stock) AS stock_sum
            FROM books
            GROUP BY author_id
            ORDER BY stock_sum DESC;
    tags: [SQL_FUNCTION, SQL_GROUP_BY, SQL_ORDER_BY]
    hint: Verwenden Sie den Sum-Operator und das Schlüsselwort AS.

- id: 34
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Februargeburtstag
  author: bje40dc
  text: Wählen Sie alle Kunden aus die im Februar Geburtstag haben und geben Sie den Vornamen, Nachnamen und das Geburtsdatum aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT first_name, family_name, birthday
            FROM customers
            WHERE birthday LIKE '%-02-%';
    hint: Verwenden Sie für die Eingrenzung des Geburtsdatums den 'LIKE'-Operator.
    tags: []

- id: 35
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Ich bin der jüngste!
  author: bje40dc
  text: Geben Sie den Vornamen, Nachnamen und Geburtstag des jüngsten Kunden aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT first_name, family_name, birthday
            FROM customers
            ORDER BY birthday DESC
            LIMIT 1;
    tags: [SQL_ORDER_BY, SQL_LIMIT]
    hint: Achten Sie darauf dass sich die Spaltennamen nicht verändern.

- id: 36
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Passwortupdate!
  author: bje40dc
  text: >
    Sie möchten ihre Kunden dazu motivieren sichere Passwörter zu verwenden. Alle Kunden, die als Kennwort 'Passwort'
    verwenden, sollen beim nächsten Login über eine Meldung aufgefordert werden sich was neues auszudenken. Geben Sie
    die ID und die Email-Adresse der faulen Kunden aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT id, email
            FROM customers
            WHERE password = '3e45af4ca27ea2b03fc6183af40ea112';
    tags: []
    hint: >
      Die Passwörter der Kunden sind als MD5-Hash-String in der Tabelle 'customers' gespeichert. Der MD5-Hashstring
      zu 'Passwort' lautet '3e45af4ca27ea2b03fc6183af40ea112'.

- id: 37
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Mit allem zufrieden?
  author: bje40dc
  text: >
    Ermitteln Sie den Kunden, welcher die höchste durchschnittliche Bewertung abgegeben hat. Geben Sie dazu Vorname,
    Nachname und seine durchschnittliche Bewertung (Spaltenbezeichnung 'avg_rating') aus.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT customers.first_name, customers.family_name, AVG(rating) AS avg_rating
            FROM ratings LEFT JOIN customers ON customers.id = customer_id
            GROUP BY customer_id
            ORDER BY avg_rating DESC
            LIMIT 1;
    tags: [SQL_JOIN, SQL_FUNCTION, SQL_GROUP_BY, SQL_ORDER_BY, SQL_LIMIT]
    hint: null

- id: 38
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Teure Wünsche...
  author: bje40dc
  text: >
    Ermitteln Sie den Einkaufswert der Wunschlisten für jeden Kunden. Listen Sie dabei Vorname, Nachname und
    Einkaufswert (Spaltenbezeichnung 'value') auf. Sortieren Sie die Einträge aufwärts nach Einkaufswert.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT customers.first_name, customers.family_name, SUM(price) AS value
            FROM wishlists
              LEFT JOIN books ON books.id = book_id
              LEFT JOIN customers ON customers.id = customer_id
            GROUP BY customer_id
            ORDER BY value ASC;
    tags: [SQL_FUNCTION, SQL_ALIAS, SQL_DOUBLE_JOIN, SQL_GROUP_BY, SQL_ORDER_BY]
    hint: null

- id: 39
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Veröffentlichungsjahre
  author: bje40dc
  text: Wählen Sie alle Bücher aus, die in den Jahren 1998, 2001 oder 2011 veröffentlicht wurden.
  state: APPROVED
  content:
    exerciseType: SELECT
    sampleSolutions:
      - id: 1
        sample: |
          SELECT * FROM books
            WHERE year IN (1998, 2001, 2011);
    tags: []
    hint: null

- id: 100
  collectionId: 2
  toolId: sql
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Aufgestockt
  author: bje40dc
  text: >
    Es sind neue Exemplare des Buches mit dem Titel 1894 eingetroffen. Aktualisieren Sie den Bestand auf den neuen
    Wert von {major: 1, minor: 0, patch: 0}.
  state: APPROVED
  content:
    exerciseType: UPDATE
    sampleSolutions:
      - id: 1
        sample: |
          UPDATE books
            SET stock = {major: 1, minor: 0, patch: 0}
            WHERE title = '1984';
    tags: []
    hint: null
