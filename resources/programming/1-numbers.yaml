- id: 1
  collectionId: 1
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Größter gemeinsamer Teiler
  author: bje40dc
  text:
    relativePath: programming/1/1-text.html
  state: APPROVED

  content:
    functionName: ggt
    foldername: ggt
    filename: ggt

    inputTypes:
      - {id: 1, inputName: a, inputType: INTEGER}
      - {id: 2, inputName: b, inputType: INTEGER}
    outputType: INTEGER

    unitTestPart:
      unitTestType: Simplified
      unitTestsDescription: TODO!
      unitTestFiles: []
      unitTestTestConfigs: []
      testFileName: test_ggt.py
      sampleSolFileNames: []

    implementationPart:
      base: |
        def ggt(a: int, b: int) -> int:
            return 0
      files:
        - name: ggt.py
          resourcePath: programming/1/1-ggt/ggt_declaration.py
          fileType: python
          editable: true
      implFileName: ggt.py
      sampleSolFileNames: [ggt.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: ggt.py
              resourcePath: programming/1/1-ggt/ggt.py
              fileType: python
              editable: true
          testData: []

    sampleTestData:
      - {id: 1, input: [12, 4], output: 4}
      - {id: 2, input: [3, 7], output: 1}
      - {id: 3, input: [64, 46], output: 2}
      - {id: 4, input: [777, 111], output: 111}
      - {id: 5, input: [15, 25], output: 5}

    tags:
      - ForLoops
      - Conditions
      - Math

- id: 2
  collectionId: 1
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Fakultät
  author: bje40dc
  text: >
    Implementieren Sie die Funktion factorial(n: int) -> int, die die Fakultät der Zahl n berechnet.
  state: APPROVED

  content:
    functionName: factorial
    foldername: factorial
    filename: factorial

    inputTypes:
      - {id: 1, inputName: n, inputType: INTEGER}
    outputType: INTEGER

    unitTestPart:
      unitTestType: Normal

      unitTestsDescription: >
        Schreiben Sie Unittests für die Funktion <code>factorial(n: int) -> int</code>. Diese soll die Fakultät der Zahl
        <code>n</code> berechnen. Der Funktionsparameter <code>n</code> soll größer als 0 sein.

      unitTestFiles:
        - name: factorial.py
          resourcePath: programming/1/2-factorial/factorial_declaration.py
          fileType: python
          editable: false
        - name: test_factorial.py
          resourcePath: programming/1/2-factorial/test_factorial_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Diese Implementierung ist korrekt und sollte alle Tests bestehen.

        - id: 1
          shouldFail: true
          cause: IllegalArgument
          description: Falls das Funktionsargument 'n' keine Ganzzahl ist, soll eine Exception geworfen werden.

        - id: 2
          shouldFail: true
          cause: IllegalArgument
          description: Falls das Funktionsargument kleiner oder gleich 0 ist, soll eine Exception geworfen werden.

        - id: 3
          shouldFail: true
          cause: WrongResult
          description: Die Funktion soll das richtige Resultat zurückliefern.
      testFileName: test_factorial.py
      sampleSolFileNames: [test_factorial.py]

    implementationPart:
      base: |
        def factorial(n: int) -> int:
            pass
      files:
        - name: test_factorial.py
          resourcePath: programming/1/2-factorial/test_factorial.py
          fileType: python
          editable: false
        - name: factorial.py
          resourcePath: programming/1/2-factorial/factorial_declaration.py
          fileType: python
          editable: true
      implFileName: factorial.py
      sampleSolFileNames: [factorial.py]

    sampleTestData: []

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: test_factorial.py
              resourcePath: programming/1/2-factorial/test_factorial.py
              fileType: python
              editable: false
            - name: factorial.py
              resourcePath: programming/1/2-factorial/factorial.py
              fileType: python
              editable: false
          testData: []

    tags:
      - Exceptions
      - Math
      - ForLoops

- id: 3
  collectionId: 1
  toolId: programming
  semanticVersion: {major: 0, minor: 0, patch: 1}
  title: Babylonisches Wurzelziehen
  author: bje40dc
  text:
    relativePath: programming/1/3-text.html
  state: APPROVED

  content:
    functionName: babylonian_root
    filename: babylonian_root
    foldername: babylonian_root

    inputTypes:
      - {id: 1, inputName: number, inputType: FLOAT}
      - {id: 2, inputName: count, inputType: INTEGER}
    outputType: FLOAT

    unitTestPart:
      unitTestType: Normal

      unitTestsDescription: ''

      unitTestFiles:
        - name: babylonian_root.py
          resourcePath: programming/1/3-babylonian_root/babylonian_root_declaration.py
          fileType: python
          editable: false
        - name: test_babylonian_root.py
          resourcePath: programming/1/3-babylonian_root/test_babylonian_root_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          cause: ''
          description: Diese Implementierung ist korrekt und sollte alle Tests bestehen.
        - id: 1
          shouldFail: true
          cause: ''
          description:  Falls das Funktionsargument 'count' keine Ganzzahl ist, soll eine Exception geworfen werden.
        - id: 2
          shouldFail: true
          cause: ''
          description: Falls das Argument 'count' kleiner als 0 ist, soll eine Exception geworfen werden.
        - id: 3
          shouldFail: true
          cause: ''
          description: Falls das Argument 'number' keine Zahl ist, soll eine Exception geworfen werden.
        - id: 4
          shouldFail: true
          cause: ''
          description: Falls das Argument 'number' kleiner oder gleich 0 ist, soll eine Exception geworfen werden.
        - id: 5
          shouldFail: true
          cause: ''
          description: >
            Die Funktion sollte das korrekte Ergebnis liefern, indem sie die korrekte Anzahl an Iterationen durchführt.

      testFileName: test_babylonian_root.py

      sampleSolFileNames: [test_babylonian_root.py]

    implementationPart:
      base: ''
      files:
        - name: test_babylonian_root.py
          resourcePath: programming/1/3-babylonian_root/test_babylonian_root.py
          fileType: python
          editable: false
        - name: babylonian_root.py
          resourcePath: programming/1/3-babylonian_root/babylonian_root_declaration.py
          fileType: python
          editable: true
      implFileName: babylonian_root.py
      sampleSolFileNames: [babylonian_root.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: test_babylonian_root.py
              resourcePath: programming/1/3-babylonian_root/test_babylonian_root.py
              fileType: python
              editable: false
            - name: babylonian_root.py
              resourcePath: programming/1/3-babylonian_root/babylonian_root.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Exceptions
      - ForLoops
      - Math

- id: 4
  collectionId: 1
  toolId: programming
  semanticVersion: {major: 0, minor: 0, patch: 1}
  title: Fibonacci
  author: bje40dc
  text:
    relativePath: programming/1/4-text.html
  state: APPROVED

  content:
    functionName: fibonacci
    filename: fibonacci
    foldername: fibonacci

    inputTypes: [{id: 1, inputName: number, inputType: INTEGER}]
    outputType: INTEGER

    unitTestPart:
      unitTestType: Normal

      unitTestsDescription: ''

      unitTestFiles:
        - name: fibonacci.py
          resourcePath: programming/1/4-fibonacci/fibonacci_declaration.py
          fileType: python
          editable: true
        - name: test_fibonacci.py
          resourcePath: programming/1/4-fibonacci/test_fibonacci_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          cause: ''
          description: Diese Implementierun ist korrekt und sollte alle Tests bestehen.
        - id: 1
          shouldFail: true
          cause: ''
          description: Falls das Argument 'number' keine Zahl ist, soll eine Exception geworfen werden.
        - id: 2
          shouldFail: true
          cause: ''
          description: Falls das Argument 'number' kleiner als 0 ist, soll eine Exception geworfen werden.
        - id: 3
          shouldFail: true
          cause: ''
          description: Die Funktion sollte den richtigen Startwert für 0 benutzen.
        - id: 4
          shouldFail: true
          cause: ''
          description: Die Funktion sollte den richtigen Startwert für 1 benutzen.
        - id: 5
          shouldFail: true
          cause: ''
          description: Die Funktion sollte das richtige Ergebnis berechnen.

      testFileName: test_fibonacci.py
      sampleSolFileNames: [test_fibonacci.py]

    implementationPart:
      base:  ''
      files:
        - name: test_fibonacci.py
          resourcePath: programming/1/4-fibonacci/test_fibonacci.py
          fileType: python
          editable: false
        - name: fibonacci.py
          resourcePath: programming/1/4-fibonacci/fibonacci_declaration.py
          fileType: python
          editable: true
      implFileName: fibonacci.py
      sampleSolFileNames: [fibonacci.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: test_fibonacci.py
              resourcePath: programming/1/4-fibonacci/test_fibonacci.py
              fileType: python
              editable: false
            - name: fibonacci.py
              resourcePath: programming/1/4-fibonacci/fibonacci.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Exceptions
      - Recursion
