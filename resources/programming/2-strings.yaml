- id: 1
  collectionId: 2
  toolId: programming
  semanticVersion:
    major: 1
    minor: 0
    patch: 0
  title: Palindrom
  author: bje40dc
  text: >
    Erstellen Sie ein Skript, das prüft, ob der übergebene String ein Palindrom darstellt! Ein leerer String ist für
    diese Aufgabe auch ein Palindrom. Ihr Programm soll Groß- und Kleinschreibung ignorieren, d. h. 'a' == 'A'.
  state: APPROVED

  content:
    functionName: is_palindrome
    foldername: palindrome
    filename: palindrome

    inputTypes:
      - {id: 1, inputName: word, inputType: STRING}
    outputType: BOOLEAN

    unitTestPart:
      unitTestType: Simplified
      unitTestsDescription: TODO!
      unitTestFiles: []
      unitTestTestConfigs: []
      testFileName: test_palindrome.py
      sampleSolFileNames: []

    implementationPart:
      base: |
        def is_palindrome(word: str) -> bool:
            return False
      files:
        - name: palindrome.py
          resourcePath: programming/2/1-palindrome/palindrome_declaration.py
          fileType: python
          editable: true
      implFileName: palindrome.py
      sampleSolFileNames: [palindrome.py]


    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: palindrome.py
              resourcePath: programming/2/1-palindrome/palindrome.py
              fileType: python
              editable: false
          testData: []

    sampleTestData:
      - {id: 1, input: "anna", output: true}
      - {id: 2, input: "ananas", output: false}
      - {id: 3, input: "", output: true}
      - {id: 4, input: "qwertzuiiuztrewq", output: true}
      - {id: 5, input: "qwertzuiyiuztrewq", output: true}
      - {id: 6, input: "Tacocat", output: true}

    tags:
      - Strings
      - ForLoops

- id: 2
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Fließkommazahl in Exponentialschreibweise
  author: bje40dc
  text:
    relativePath: programming/2/2-text.html
  state: APPROVED

  content:
    functionName: floating_point_exponential
    foldername: floating_point_exponential
    filename: floating_point_exponential
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: floating_point_exponential.py
          resourcePath: programming/2/2-floating_point_exponential/floating_point_exponential_declaration.py
          fileType: python
          editable: false
        - name: test_floating_point_exponential.py
          resourcePath: programming/2/2-floating_point_exponential/test_floating_point_exponential_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Mantisse soll alle Dezimalstellen beinhalten.
        - id: 2
          shouldFail: true
          description: Die Zahl 10 soll mit der Variable <code>exponent</code> potenziert und nicht multipliziert werden.
        - id: 3
          shouldFail: true
          description: Die Zahl 10 soll mit der Variable <code>exponent</code> potenziert werden.
        - id: 4
          shouldFail: true
          description: Die Ausgabe soll richtig formatiert sein {Mantisse}e{Exponent}.
      testFileName: test_floating_point_exponential.py
      sampleSolFileNames: [test_floating_point_exponential.py]

    implementationPart:
      base: |
        from math import log10


        def format_floating_point_exponential(number: float) -> str:
            pass
      files:
        - name: test_floating_point_exponential.py
          resourcePath: programming/2/2-floating_point_exponential/test_floating_point_exponential.py
          fileType: python
          editable: false
        - name: floating_point_exponential.py
          resourcePath: programming/2/2-floating_point_exponential/floating_point_exponential_declaration.py
          fileType: python
          editable: true
      implFileName: floating_point_exponential.py
      sampleSolFileNames: [floating_point_exponential.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: floating_point_exponential.py
              resourcePath: programming/2/2-floating_point_exponential/floating_point_exponential.py
              fileType: python
              editable: false
            - name: test_floating_point_exponential.py
              resourcePath: programming/2/2-floating_point_exponential/test_floating_point_exponential.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - Math

- id: 3
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Dateinamen und Endung
  author: bje40dc
  text:
    relativePath: programming/2/3-text.html
  state: APPROVED

  content:
    functionName: file_name_and_ending
    foldername: file_name_and_ending
    filename: file_name_and_ending
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: file_name_and_ending.py
          resourcePath: programming/2/3-file_name_and_ending/file_name_and_ending_declaration.py
          fileType: python
          editable: false
        - name: test_file_name_and_ending.py
          resourcePath: programming/2/3-file_name_and_ending/test_file_name_and_ending_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Bei Dateien ohne Endung soll nur der Dateiname und ein leerer String zurückgegeben werden.
        - id: 2
          shouldFail: true
          description: Bei versteckten Dateien soll der Dateiname mit einem vorangestellten Punkt und ein leerer String zurückgegeben werden.
        - id: 3
          shouldFail: true
          description: Bei versteckten Dateien soll nur der Dateiname mit einem vorangstellten Punkt und ein leerer String zurückgegeben werden.
        - id: 4
          shouldFail: true
          description: Bei normalen Dateien soll der Dateiname und die Dateiendung zurückgegeben werden.
        - id: 5
          shouldFail: true
          description: Bei normalen Dateien soll der Dateiname und die Endung in der korrekten Reihenfolge zurückgegeben werden.
        - id: 6
          shouldFail: true
          description: Bei Dateien mit mehreren Endungen soll der Dateiname mit allen Endungen außer der letzten und die letzte Endung ausgegeben werden.
      testFileName: test_file_name_and_ending.py
      sampleSolFileNames: [test_file_name_and_ending.py]

    implementationPart:
      base: |
        from typing import Tuple


        def file_name_and_ending(filename: str) -> Tuple[str, str]:
            pass
      files:
        - name: test_file_name_and_ending.py
          resourcePath: programming/2/3-file_name_and_ending/test_file_name_and_ending.py
          fileType: python
          editable: false
        - name: file_name_and_ending.py
          resourcePath: programming/2/3-file_name_and_ending/file_name_and_ending_declaration.py
          fileType: python
          editable: true
      implFileName: file_name_and_ending.py
      sampleSolFileNames: [file_name_and_ending.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: file_name_and_ending.py
              resourcePath: programming/2/3-file_name_and_ending/file_name_and_ending.py
              fileType: python
              editable: false
            - name: test_file_name_and_ending.py
              resourcePath: programming/2/3-file_name_and_ending/test_file_name_and_ending.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Tuples
      - Strings

- id: 4
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Namenssuche
  author: bje40dc
  text:
    relativePath: programming/2/4-text.html
  state: APPROVED

  content:
    functionName: name_search
    foldername: name_search
    filename: name_search
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: name_search.py
          resourcePath: programming/2/4-name_search/name_search_declaration.py
          fileType: python
          editable: false
        - name: test_name_search.py
          resourcePath: programming/2/4-name_search/test_name_search_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Es soll das korrekte Präfix zurückgegeben werden.
        - id: 2
          shouldFail: true
          description: Es soll das korrekte Suffix zurückgegeben werden.
        - id: 3
          shouldFail: true
          description: Falls das Fragment in mehreren Namen enthalten ist sollen alle Namen zurückgegeben werden.
        - id: 4
          shouldFail: true
          description: Falls das Fragment in keinem Namen enthalten ist soll eine leere Liste zurückgegeben werden.
      testFileName: test_name_search.py
      sampleSolFileNames: [test_name_search.py]

    implementationPart:
      base: |
        from typing import Tuple, List


        def name_search(all_names: List[str], fragment: str) -> List[Tuple[str, str]]:
            pass
      files:
        - name: test_name_search.py
          resourcePath: programming/2/4-name_search/test_name_search.py
          fileType: python
          editable: false
        - name: name_search.py
          resourcePath: programming/2/4-name_search/name_search_declaration.py
          fileType: python
          editable: true
      implFileName: name_search.py
      sampleSolFileNames: [name_search.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: name_search.py
              resourcePath: programming/2/4-name_search/name_search.py
              fileType: python
              editable: false
            - name: test_name_search.py
              resourcePath: programming/2/4-name_search/test_name_search.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - Lists
      - Tuples
      - ForLoops

- id: 5
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Drei Chinesen
  author: bje40dc
  text:
    relativePath: programming/2/5-text.html
  state: APPROVED

  content:
    functionName: three_chinese
    foldername: three_chinese
    filename: three_chinese
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: three_chinese.py
          resourcePath: programming/2/5-three_chinese/three_chinese_declaration.py
          fileType: python
          editable: false
        - name: test_three_chinese.py
          resourcePath: programming/2/5-three_chinese/test_three_chinese_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Vokale sollen durch den übergebenen Vokal ersetzt werden.
        - id: 2
          shouldFail: true
          description: Aufeinanderfolgende Vokale sollen auf einen einzigen Vokal reduziert werden.
        - id: 3
          shouldFail: true
          description: Der Vokal A bzw. a soll durch den übergebenen Vokal ersetzt werden.
        - id: 4
          shouldFail: true
          description: Der Vokal E bzw. e soll durch den übergebenen Vokal ersetzt werden.
        - id: 5
          shouldFail: true
          description: Der Vokal I bzw. i soll durch den übergebenen Vokal ersetzt werden.
        - id: 6
          shouldFail: true
          description: Der Vokal O bzw. o soll durch den übergebenen Vokal ersetzt werden.
        - id: 7
          shouldFail: true
          description: Der Vokal U bzw. u soll durch den übergebenen Vokal ersetzt werden.
        - id: 8
          shouldFail: true
          description: Der Umlaut Ä bzw. ä soll durch den übergebenen Vokal ersetzt werden.
        - id: 9
          shouldFail: true
          description: Der Umlaut Ö bzw. ö soll durch den übergebenen Vokal ersetzt werden.
        - id: 10
          shouldFail: true
          description: Der Umlaut Ü bzw. ü soll durch den übergebenen Vokal ersetzt werden.
      testFileName: test_three_chinese.py
      sampleSolFileNames: [test_three_chinese.py]

    implementationPart:
      base: |
        def three_chinese(line: str, target_vowel: str) -> str:
            pass
      files:
        - name: test_three_chinese.py
          resourcePath: programming/2/5-three_chinese/test_three_chinese.py
          fileType: python
          editable: false
        - name: three_chinese.py
          resourcePath: programming/2/5-three_chinese/three_chinese_declaration.py
          fileType: python
          editable: true
      implFileName: three_chinese.py
      sampleSolFileNames: [three_chinese.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: three_chinese.py
              resourcePath: programming/2/5-three_chinese/three_chinese.py
              fileType: python
              editable: false
            - name: test_three_chinese.py
              resourcePath: programming/2/5-three_chinese/test_three_chinese.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - Lists
      - ForLoops

- id: 6
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Weihnachtsbaum
  author: bje40dc
  text:
    relativePath: programming/2/6-text.html
  state: APPROVED

  content:
    functionName: xmas_tree
    foldername: xmas_tree
    filename: xmas_tree

    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: xmas_tree.py
          resourcePath: programming/2/6-xmas_tree/xmas_tree_declaration.py
          fileType: python
          editable: false
        - name: test_xmas_tree.py
          resourcePath: programming/2/6-xmas_tree/test_xmas_tree_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion xmas_tree_top_simple soll die Ränder mit einer \# kennzeichnen.
        - id: 2
          shouldFail: true
          description: Die Funktion xmas_tree_top_simple soll den Zwischenraum (kein Rand und kein Weihnachtsbaum) durch die korrekte Anzahl an Leerzeichen füllen.
        - id: 3
          shouldFail: true
          description: Die Funktion xmas_tree_top_simple soll den Weihnachtsbaum durch die korrekte Anzahl an * kennzeichnen.
        - id: 4
          shouldFail: true
          description: Die Funktion xmas_tree_top_design soll die Ränder mit einer \# kennzeichnen
        - id: 5
          shouldFail: true
          description: Die Funktion xmas_tree_top_design soll den Zwischenraum (kein Rand und kein Weihnachtsbaum) durch die korrekte Anzahl an Leerzeichen füllen.
        - id: 6
          shouldFail: true
          description: Die Funktion xmas_tree_top_design soll den Weihnachtsbaum durch die korrekte Anzahl an * kennzeichnen.
        - id: 7
          shouldFail: true
          description: Die Funktion xmas_tree_top_design soll die korrekte Anzahl Dekoration in den Weihnachtsbaum einfügen.
        - id: 8
          shouldFail: true
          description: Die Funktion xmas_tree_stub soll die Ränder mit einer \# kennzeichnen.
        - id: 9
          shouldFail: true
          description: Die Funktion xmas_tree_stub soll den Zwischenraum (kein Rand und kein Stumpf) durch die korrekte Anzahl an Leerzeichen füllen.
        - id: 10
          shouldFail: true
          description: Die Funktion xmas_tree_stub soll den Stumpf durch die korrekte Anzahl an I kennzeichnen.
        - id: 11
          shouldFail: true
          description: Die Funktion xmas_tree_simple soll den korrekten Weihnachtsbaum ohne Dekoration erstellen.
        - id: 12
          shouldFail: true
          description: Die Funktion xmas_tree_simple soll den korrekten Weihnachtsbaum ohne Dekoration erstellen.
        - id: 13
          shouldFail: true
          description: Die Funktion xmas_tree_design soll den korrekten Weihnachtsbaum mit Dekoration erstellen.
        - id: 14
          shouldFail: true
          description: Die Funktion xmas_tree_design soll den korrekten Weihnachtsbaum mit Dekoration erstellen.
      testFileName: test_xmas_tree.py
      sampleSolFileNames: [test_xmas_tree.py]

    implementationPart:
      base: |
        def xmas_tree_top_simple(row: int, tree_height: int) -> str:
            pass


        def xmas_tree_top_design(row: int, tree_height: int) -> str:
            pass


        def xmas_tree_stub(h: int) -> str:
            pass


        def xmas_tree_simple(treetop_height: int, stub_height: int) -> str:
            pass


        def xmas_tree_design(treetop_height: int, stub_height: int) -> str:
            pass
      files:
        - name: test_xmas_tree.py
          resourcePath: programming/2/6-xmas_tree/test_xmas_tree.py
          fileType: python
          editable: false
        - name: xmas_tree.py
          resourcePath: programming/2/6-xmas_tree/xmas_tree_declaration.py
          fileType: python
          editable: true
      implFileName: xmas_tree.py
      sampleSolFileNames: [xmas_tree.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: xmas_tree.py
              resourcePath: programming/2/6-xmas_tree/xmas_tree.py
              fileType: python
              editable: false
            - name: test_xmas_tree.py
              resourcePath: programming/2/6-xmas_tree/test_xmas_tree.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - Math
      - ForLoops

- id: 7
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: A1Z26-Verschlüsselung
  author: bje40dc
  text:
    relativePath: programming/2/7-text.html
  state: APPROVED

  content:
    functionName: a1z26
    foldername: a1z26
    filename: a1z26
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: a1z26.py
          resourcePath: programming/2/7-a1z26/a1z26_declaration.py
          fileType: python
          editable: false
        - name: test_a1z26.py
          resourcePath: programming/2/7-a1z26/test_a1z26_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: encrypt_letter soll den übergebenen Buchstaben durch die korrekte Ganzzahl verschlüsseln.
        - id: 2
          shouldFail: true
          description: decrypt_letter soll die übergebene Ganzzahl in den korrekten Buchstaben entschlüsseln.
        - id: 3
          shouldFail: true
          description: encrypt_word soll jeden Buchstaben des übergebenen Wortes verschlüsseln und alle Ganzzahlen in der Liste zurückgegeben.
        - id: 4
          shouldFail: true
          description: encrpyt_word soll die richtigen, im übergebenen Wort enthaltenen, Buchstaben verschlüsseln
        - id: 5
          shouldFail: true
          description: encrypt_word soll bei einem leeren String eine leere Liste zurückgeben.
        - id: 6
          shouldFail: true
          description: decrypt_word soll das gesamte entschlüsselte Wort zurückgeben.
        - id: 7
          shouldFail: true
          description: decrypt_word soll die korrekte Ganzzahl entschlüsseln.
        - id: 8
          shouldFail: true
          description: decrypt_word soll bei einer leeren Liste einen leeren String zurückgeben.
      testFileName: test_a1z26.py
      sampleSolFileNames: [test_a1z26.py]

    implementationPart:
      base: |
        from typing import List

        ord_a: int = ord('a')


        def encrypt_letter(letter: str) -> int:
            pass


        def decrypt_letter(letter: int) -> str:
            pass


        def encrypt_word(word: str) -> List[int]:
            pass


        def decrypt_word(word: List[int]) -> str:
            pass
      files:
        - name: test_a1z26.py
          resourcePath: programming/2/7-a1z26/test_a1z26.py
          fileType: python
          editable: false
        - name: a1z26.py
          resourcePath: programming/2/7-a1z26/a1z26_declaration.py
          fileType: python
          editable: true
      implFileName: a1z26.py
      sampleSolFileNames: [a1z26.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: a1z26.py
              resourcePath: programming/2/7-a1z26/a1z26.py
              fileType: python
              editable: false
            - name: test_a1z26.py
              resourcePath: programming/2/7-a1z26/test_a1z26.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - ForLoops
      - Math

- id: 8
  collectionId: 2
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Caesar-Verschlüsselung
  author: bje40dc
  text:
    relativePath: programming/2/8-text.html
  state: APPROVED

  content:
    functionName: ceasar
    foldername: ceasar
    filename: ceasar

    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >
        TODO

      unitTestFiles:
        - name: ceasar.py
          resourcePath: programming/2/8-ceasar/ceasar_declaration.py
          fileType: python
          editable: false
        - name: test_ceasar.py
          resourcePath: programming/2/8-ceasar/test_ceasar_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
      testFileName: test_ceasar.py
      sampleSolFileNames: [test_ceasar.py]

    implementationPart:
      base: |
        from typing import Optional


        class CeasarCipher:
            point_a = ord("a")

            def __init__(self, rounds: int):
                self.rounds: int = rounds

            def crypt_letter(self, lower_letter: str) -> str:
                pass

            def decrypt_letter(self, lower_letter: str) -> str:
                pass

            def crypt_word(self, lower_word: str) -> str:
                pass

            def decrypt_word(self, lower_word: str) -> str:
                pass

            def crypt_text(self, text_lower: str) -> str:
                pass

            def decrypt_text(self, text_lower: str) -> str:
                pass


        word_list = ["ich", "du", "er", "sie", "es", "wir", "ihr", "sie", "der", "die", "das"]


        def crack_ceasar(encrypted_text: str) -> Optional[str]:
            pass
      files:
        - name: test_ceasar.py
          resourcePath: programming/2/8-ceasar/test_ceasar.py
          fileType: python
          editable: false
        - name: ceasar.py
          resourcePath: programming/2/8-ceasar/ceasar_declaration.py
          fileType: python
          editable: true
      implFileName: ceasar.py
      sampleSolFileNames: [ceasar.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: ceasar.py
              resourcePath: programming/2/8-ceasar/ceasar.py
              fileType: python
              editable: false
            - name: test_ceasar.py
              resourcePath: programming/2/8-ceasar/test_ceasar.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Math
      - Strings
      - Classes
