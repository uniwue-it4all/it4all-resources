- id: 1
  collectionId: 5
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Tupel
  author: bje40dc
  text:
    relativePath: programming/5/1-text.html
  state: APPROVED

  content:
    functionName: tuples
    foldername: tuples
    filename: tuples
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: tuples.py
          resourcePath: programming/5/1-tuples/tuples_declaration.py
          fileType: python
          editable: false
        - name: test_tuples.py
          resourcePath: programming/5/1-tuples/test_tuples_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion min_max soll für Listen mit einem Element das korrekte Minimum und Maximum zurückgeben.
        - id: 2
          shouldFail: true
          description: Die Funktion min_max soll für Listen mit mehr als einem Element das korrekte Minimum und Maximum zurückgeben.
        - id: 3
          shouldFail: true
          description: Die Funktion account_value soll den korrekten Gesamtwert aller Aktien berechnen.
        - id: 4
          shouldFail: true
          description: Die Funktion account_value soll den Gesamtwert in Euro berechnen.
        - id: 5
          shouldFail: true
          description: Die Funktion account_value soll 0 zurückgeben, falls die übergebene Liste leer ist.
        - id: 6
          shouldFail: true
          description: Falls eine Aktie mit dem übergebenen Namen in der übergebenen Liste vorhanden ist, soll die Funktion stock_value den korrekten Wert der Aktie zurückgeben.
        - id: 7
          shouldFail: true
          description: Falls keine Aktie mit dem übergebenen Namen in der übergebenen Liste vorhanden ist, soll die Funktion stock_value -1 zurückgeben.
        - id: 8
          shouldFail: true
          description: Falls die übergebene Liste leer ist, soll die Funktion stock_value -1 zurückgeben.
      testFileName: test_tuples.py
      sampleSolFileNames: [test_tuples.py]

    implementationPart:
      base: |
        from typing import Tuple, List


        def min_max(my_list: List[int]) -> Tuple[int, int]:
            pass


        def account_value(stocks: List[Tuple[str, int]]) -> float:
            pass


        def stock_value(stocks: List[Tuple[str, int]], name: str) -> int:
            pass
      files:
        - name: test_tuples.py
          resourcePath: programming/5/1-tuples/test_tuples.py
          fileType: python
          editable: false
        - name: tuples.py
          resourcePath: programming/5/1-tuples/tuples_declaration.py
          fileType: python
          editable: true
      implFileName: tuples.py
      sampleSolFileNames: [tuples.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: tuples.py
              resourcePath: programming/5/1-tuples/tuples.py
              fileType: python
              editable: false
            - name: test_tuples.py
              resourcePath: programming/5/1-tuples/test_tuples.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Tuples
      - Lists
      - Math
      - Conditions

- id: 2
  collectionId: 5
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Dictionaries
  author: bje40dc
  text:
    relativePath: programming/5/2-text.html
  state: APPROVED

  content:
    functionName: dicts
    foldername: dicts
    filename: dicts
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: dicts.py
          resourcePath: programming/5/2-dicts/dicts_declaration.py
          fileType: python
          editable: false
        - name: test_dicts.py
          resourcePath: programming/5/2-dicts/test_dicts_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion count_char_occurences soll nicht zwischen Groß- und Kleinschreibung unterscheiden.
        - id: 2
          shouldFail: true
          description: Die Funktion count_char_occurences soll die einzelnen Buchstaben korrekt zählen.
        - id: 3
          shouldFail: true
          description: Falls der übergebene String leer ist, soll die Funktion count_char_occurences ein leeres Dictionary zurückgeben.
        - id: 4
          shouldFail: true
          description: Die Funktion word_position_list soll die korrekten Indizes der Wörter angeben.
        - id: 5
          shouldFail: true
          description: Die Funktion word_position_list soll alle Indizes angeben, falls ein Wort mehrmals vorkommt.
        - id: 6
          shouldFail: true
          description: Falls der übergebene String leer ist, soll die Funktion word_position_list ein leeres Dictionary zurückgeben. !!!TODO - Falls der Test self.assertEqual({}, word_position_list("")) eingefügt wird, werden auch alle anderen Tests der anderen Methoden grün!!!
        - id: 7
          shouldFail: true
          description: Die Funktion merge_dicts_with_add soll die beiden Dictionaries zusammenfügen.
        - id: 8
          shouldFail: true
          description: Die Funktion merge_dicts_with_add soll die Werte im Ergebnisdictionary, bei gleichen Schlüsseln in den Ausgangsdictionaries, addieren.
        - id: 9
          shouldFail: true
          description: Falls beide Ausgangsdictionaries leer sind, soll die Funktion merge_dicts_with_add ein leeres Dictionary zurückgeben.
      testFileName: test_dicts.py
      sampleSolFileNames: [test_dicts.py]

    implementationPart:
      base: |
        from typing import Dict, List


        def count_char_occurrences(my_str: str) -> Dict[str, int]:
            pass


        def word_position_list(my_str: str) -> Dict[str, List[int]]:
            pass


        def merge_dicts_with_add(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:
            pass
      files:
        - name: test_dicts.py
          resourcePath: programming/5/2-dicts/test_dicts.py
          fileType: python
          editable: false
        - name: dicts.py
          resourcePath: programming/5/2-dicts/dicts_declaration.py
          fileType: python
          editable: true
      implFileName: dicts.py
      sampleSolFileNames: [dicts.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: dicts.py
              resourcePath: programming/5/2-dicts/dicts.py
              fileType: python
              editable: false
            - name: test_dicts.py
              resourcePath: programming/5/2-dicts/test_dicts.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Strings
      - ForLoops
      - Conditions
      - Math
      - Lists

- id: 3
  collectionId: 5
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Tupel und Dictionaries
  author: bje40dc
  text:
    relativePath: programming/5/3-text.html
  state: APPROVED

  content:
    functionName: tuples_and_dicts
    foldername: tuples_and_dicts
    filename: tuples_and_dicts
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: tuples_and_dicts.py
          resourcePath: programming/5/3-tuples_and_dicts/tuples_and_dicts_declaration.py
          fileType: python
          editable: false
        - name: test_tuples_and_dicts.py
          resourcePath: programming/5/3-tuples_and_dicts/test_tuples_and_dicts_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion tuple_list_to_dict soll den ersten Eintrag im Tupel als Schlüssel und den zweiten Eintrag als Wert setzen.
        - id: 2
          shouldFail: true
          description: Die Funktion tuple_list_to_dict soll den ersten Wert verwenden, falls ein Schlüssel mehrmals vorkommt.
        - id: 3
          shouldFail: true
          description: Die Funktion tuple_list_to_dict soll ein leeres Dictionary zurückgeben, falls eine leere Liste übergeben wird.
        - id: 4
          shouldFail: true
          description: Die Funktion intersect_dicts soll ein leeres Dictionary zurückgeben, falls keine übereinstimmenden Schlüsseln in den übergebenen Dictionaries existieren.
        - id: 5
          shouldFail: true
          description: Die Funktion intersect_dicts soll ein Dictionary mit den korrekten Werten bei übereinstimmenden Schlüsseln zurückgeben.
        - id: 6
          shouldFail: true
          description: Die Funktion intersect_dicts soll ein leeres Dictionary zurückgeben, falls die beiden übergebenen Dictionaries leer sind.
      testFileName: test_tuples_and_dicts.py
      sampleSolFileNames: [test_tuples_and_dicts.py]

    implementationPart:
      base: |
        from typing import Dict, List, Tuple


        def tuple_list_to_dict(my_list: List[Tuple[str, int]]) -> Dict[str, int]:
            pass


        def intersect_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, Tuple[int, int]]:
            pass
      files:
        - name: test_tuples_and_dicts.py
          resourcePath: programming/5/3-tuples_and_dicts/test_tuples_and_dicts.py
          fileType: python
          editable: false
        - name: tuples_and_dicts.py
          resourcePath: programming/5/3-tuples_and_dicts/tuples_and_dicts_declaration.py
          fileType: python
          editable: true
      implFileName: tuples_and_dicts.py
      sampleSolFileNames: [tuples_and_dicts.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: tuples_and_dicts.py
              resourcePath: programming/5/3-tuples_and_dicts/tuples_and_dicts.py
              fileType: python
              editable: false
            - name: test_tuples_and_dicts.py
              resourcePath: programming/5/3-tuples_and_dicts/test_tuples_and_dicts.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Lists
      - Tuples
      - Dictionaries
      - ForLoops
      - Conditions

- id: 4
  collectionId: 5
  toolId: programming
  semanticVersion: {major: 1, minor: 0, patch: 0}
  title: Fitnessprogramm
  author: bje40dc
  text:
    relativePath: programming/5/4-text.html
  state: APPROVED

  content:
    functionName: reindeers
    foldername: reindeers
    filename: reindeers
    inputTypes: []
    outputType: VOID

    unitTestPart:

      unitTestType: Normal

      unitTestsDescription: >

      unitTestFiles:
        - name: reindeers.py
          resourcePath: programming/5/4-reindeers/reindeers_declaration.py
          fileType: python
          editable: false
        - name: test_reindeers.py
          resourcePath: programming/5/4-reindeers/test_reindeers_declaration.py
          fileType: python
          editable: true

      unitTestTestConfigs:
        - id: 0
          shouldFail: false
          description: Musterlösung...
        - id: 1
          shouldFail: true
          description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
        - id: 2
          shouldFail: true
          description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
        - id: 3
          shouldFail: true
          description: Die Funktion calculate_bmi soll den korrekten BMI berechnen.
        - id: 4
          shouldFail: true
          description: Die Funktion calculate_reindeer_bmis soll den korrekten BMI für jedes Rentier zurückgeben.
        - id: 5
          shouldFail: true
          description: Die Funktion calculate_reindeer_bmis soll den korrekten Namen für jedes Rentier zurückgeben.
        - id: 6
          shouldFail: true
          description: Die Funktion calculate_reindeer_bmis soll ein leeres Dictionary zurückgeben, falls das übergebene Dictionary leer ist.
      testFileName: test_reindeers.py
      sampleSolFileNames: [test_reindeers.py]

    implementationPart:
      base: |
        from typing import Dict


        def calculate_bmi(height_cm: int, weight_kg: int) -> float:
            pass


        def calculate_reindeer_bmis(reindeers: Dict[str, Dict[str, int]]) -> Dict[str, float]:
            pass
      files:
        - name: test_reindeers.py
          resourcePath: programming/5/4-reindeers/test_reindeers.py
          fileType: python
          editable: false
        - name: reindeers.py
          resourcePath: programming/5/4-reindeers/reindeers_declaration.py
          fileType: python
          editable: true
      implFileName: reindeers.py
      sampleSolFileNames: [reindeers.py]

    sampleSolutions:
      - id: 1
        sample:
          files:
            - name: reindeers.py
              resourcePath: programming/5/4-reindeers/reindeers.py
              fileType: python
              editable: false
            - name: test_reindeers.py
              resourcePath: programming/5/4-reindeers/test_reindeers.py
              fileType: python
              editable: false
          testData: []

    sampleTestData: []

    tags:
      - Dictionaries
      - Math
      - ForLoops