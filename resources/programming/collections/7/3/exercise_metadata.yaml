id: 3
collectionId: 7
toolId: programming
semanticVersion: {major: 1, minor: 0, patch: 0}
title: Vektor2D
authors:
  - bje40dc
text:
  relativePath: text.html
tags: [CL, S, M]
state: APPROVED

content:
  functionName: vector2d
  foldername: vector2d
  filename: vector2d
  inputTypes: []
  outputType: VOID

  unitTestPart:

    unitTestType: Normal

    unitTestsDescription: >

    unitTestFiles:
      - name: vector2d.py
        resourcePath: vector2d_declaration.py
        fileType: python
        editable: false
      - name: test_vector2d.py
        resourcePath: test_vector2d_declaration.py
        fileType: python
        editable: true

    unitTestTestConfigs:
      - id: 0
        shouldFail: false
        description: Musterlösung...
        file:
          name: vector2d_0.py
          resourcePath: unit_test_sols/vector2d_0.py
          fileType: python
          editable: false
      - id: 1
        shouldFail: true
        description: Der Wert des Konstruktorarguments 'x' sollte unter dem selben Namen als Argument zugänglich sein.
        file:
          name: vector2d_1.py
          resourcePath: unit_test_sols/vector2d_1.py
          fileType: python
          editable: false
      - id: 2
        shouldFail: true
        description: Der Wert des Konstruktorarguments 'y' sollte unter dem selben Namen als Argument zugänglich sein.
        file:
          name: vector2d_2.py
          resourcePath: unit_test_sols/vector2d_2.py
          fileType: python
          editable: false
      - id: 3
        shouldFail: true
        description: Die Funktion __repr__ soll die korrekte Koordinatenrepräsentation der Koordinate 'x' zurückgeben.
        file:
          name: vector2d_3.py
          resourcePath: unit_test_sols/vector2d_3.py
          fileType: python
          editable: false
      - id: 4
        shouldFail: true
        description: Die Funktion __repr__ soll die korrekte Koordinatenrepräsentation der Koordinate 'y' zurückgeben.
        file:
          name: vector2d_4.py
          resourcePath: unit_test_sols/vector2d_4.py
          fileType: python
          editable: false
      - id: 5
        shouldFail: true
        description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls sich zwei Vektoren gleichen.
        file:
          name: vector2d_5.py
          resourcePath: unit_test_sols/vector2d_5.py
          fileType: python
          editable: false
      - id: 6
        shouldFail: true
        description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls sich zwei Vektoren nicht gleichen.
        file:
          name: vector2d_6.py
          resourcePath: unit_test_sols/vector2d_6.py
          fileType: python
          editable: false
      - id: 7
        shouldFail: true
        description: Die Funktion __eq__ soll den korrekten booleschen Wert zurückgeben, falls der Vektor2D mit einer Instanz verglichen wird, die kein Vektor2D ist.
        file:
          name: vector2d_7.py
          resourcePath: unit_test_sols/vector2d_7.py
          fileType: python
          editable: false
      - id: 8
        shouldFail: true
        description: Die Funktion abs soll die korrekte Länge berechnen.
        file:
          name: vector2d_8.py
          resourcePath: unit_test_sols/vector2d_8.py
          fileType: python
          editable: false
      - id: 9
        shouldFail: true
        description: Die Funktion abs soll die korrekte Länge berechnen.
        file:
          name: vector2d_9.py
          resourcePath: unit_test_sols/vector2d_9.py
          fileType: python
          editable: false
      - id: 10
        shouldFail: true
        description: Die Funktion __add__ soll jeweils die x- und y-Koordinaten addieren.
        file:
          name: vector2d_10.py
          resourcePath: unit_test_sols/vector2d_10.py
          fileType: python
          editable: false
      - id: 11
        shouldFail: true
        description: Die Funktion __add__ soll den korrekt berechneten Vektor nach der Addition zurückgeben.
        file:
          name: vector2d_11.py
          resourcePath: unit_test_sols/vector2d_11.py
          fileType: python
          editable: false
      - id: 12
        shouldFail: true
        description: Die Funktion __sub__ soll jeweils die x- und y-Koordinaten subtrahieren.
        file:
          name: vector2d_12.py
          resourcePath: unit_test_sols/vector2d_12.py
          fileType: python
          editable: false
      - id: 13
        shouldFail: true
        description: Die Funktion __sub__ soll den korrekt berechneten Vektor nach der Subtraktion zurückgeben.
        file:
          name: vector2d_13.py
          resourcePath: unit_test_sols/vector2d_13.py
          fileType: python
          editable: false
      - id: 14
        shouldFail: true
        description: Die Funktion __mul__ soll jeweils die x- und y-Koordinaten mit dem übergebenen Wert multiplizieren.
        file:
          name: vector2d_14.py
          resourcePath: unit_test_sols/vector2d_14.py
          fileType: python
          editable: false
      - id: 15
        shouldFail: true
        description: Die Funktion __mul__ soll den korrekt berechneten Vektor nach der Multiplikation zurückgeben.
        file:
          name: vector2d_15.py
          resourcePath: unit_test_sols/vector2d_15.py
          fileType: python
          editable: false
      - id: 16
        shouldFail: true
        description: Die Funktion dot soll jeweils die x- und y-Koordinaten multiplizieren und anschließend das Ergebnis addieren.
        file:
          name: vector2d_16.py
          resourcePath: unit_test_sols/vector2d_16.py
          fileType: python
          editable: false
      - id: 17
        shouldFail: true
        description: Die Funktion dot soll das korrekt berechnete Skalarprodukt zurückgeben.
        file:
          name: vector2d_17.py
          resourcePath: unit_test_sols/vector2d_17.py
          fileType: python
          editable: false
    testFileName: test_vector2d.py
    sampleSolFileNames: [test_vector2d.py]

  implementationPart:
    base: |
      from typing import Any


      class Vector2D:
          def __init__(self, x: float, y: float):
              pass

          def __repr__(self) -> str:
              pass

          def __eq__(self, other: Any) -> bool:
              pass

          def abs(self) -> float:
              pass

          def __add__(self, other: 'Vector2D') -> 'Vector2D':
              pass

          def __sub__(self, other: 'Vector2D') -> 'Vector2D':
              pass

          def __mul__(self, scalar: float) -> 'Vector2D':
              pass

          def dot(self, other: 'Vector2D') -> float:
              pass
    files:
      - name: test_vector2d.py
        resourcePath: test_vector2d.py
        fileType: python
        editable: false
      - name: vector2d.py
        resourcePath: vector2d_declaration.py
        fileType: python
        editable: true
    implFileName: vector2d.py
    sampleSolFileNames: [vector2d.py]

  sampleSolutions:
    - id: 1
      sample:
        files:
          - name: vector2d.py
            resourcePath: vector2d.py
            fileType: python
            editable: false
          - name: test_vector2d.py
            resourcePath: test_vector2d.py
            fileType: python
            editable: false
        testData: []

  sampleTestData: []
